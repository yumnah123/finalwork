# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Admin {
  id: ID!
  name: String
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input AdminWhereUniqueInput {
  id: ID
  email: String
}

input AdminWhereInput {
  AND: [AdminWhereInput!]
  OR: [AdminWhereInput!]
  NOT: [AdminWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  password: PasswordFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input AdminOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input AdminUpdateInput {
  name: String
  email: String
  password: String
}

input AdminUpdateArgs {
  where: AdminWhereUniqueInput!
  data: AdminUpdateInput!
}

input AdminCreateInput {
  name: String
  email: String
  password: String
}

type ContactPage {
  id: ID!
  bookingService: String
  phoneSupport: String
  officeHours: String
  weekendOffice: String
  emergencyService: String
  note: String
  faqs(where: FAQWhereInput! = {}, orderBy: [FAQOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FAQWhereUniqueInput): [FAQ!]
  faqsCount(where: FAQWhereInput! = {}): Int
}

input ContactPageWhereUniqueInput {
  id: ID
}

input ContactPageWhereInput {
  AND: [ContactPageWhereInput!]
  OR: [ContactPageWhereInput!]
  NOT: [ContactPageWhereInput!]
  id: IDFilter
  bookingService: StringFilter
  phoneSupport: StringFilter
  officeHours: StringFilter
  weekendOffice: StringFilter
  emergencyService: StringFilter
  note: StringFilter
  faqs: FAQManyRelationFilter
}

input FAQManyRelationFilter {
  every: FAQWhereInput
  some: FAQWhereInput
  none: FAQWhereInput
}

input ContactPageOrderByInput {
  id: OrderDirection
  bookingService: OrderDirection
  phoneSupport: OrderDirection
  officeHours: OrderDirection
  weekendOffice: OrderDirection
  emergencyService: OrderDirection
  note: OrderDirection
}

input ContactPageUpdateInput {
  bookingService: String
  phoneSupport: String
  officeHours: String
  weekendOffice: String
  emergencyService: String
  note: String
  faqs: FAQRelateToManyForUpdateInput
}

input FAQRelateToManyForUpdateInput {
  disconnect: [FAQWhereUniqueInput!]
  set: [FAQWhereUniqueInput!]
  create: [FAQCreateInput!]
  connect: [FAQWhereUniqueInput!]
}

input ContactPageUpdateArgs {
  where: ContactPageWhereUniqueInput!
  data: ContactPageUpdateInput!
}

input ContactPageCreateInput {
  bookingService: String
  phoneSupport: String
  officeHours: String
  weekendOffice: String
  emergencyService: String
  note: String
  faqs: FAQRelateToManyForCreateInput
}

input FAQRelateToManyForCreateInput {
  create: [FAQCreateInput!]
  connect: [FAQWhereUniqueInput!]
}

type FAQ {
  id: ID!
  question: String
  answer: String
  order: Int
  contactPage: ContactPage
}

input FAQWhereUniqueInput {
  id: ID
}

input FAQWhereInput {
  AND: [FAQWhereInput!]
  OR: [FAQWhereInput!]
  NOT: [FAQWhereInput!]
  id: IDFilter
  question: StringFilter
  answer: StringFilter
  order: IntNullableFilter
  contactPage: ContactPageWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input FAQOrderByInput {
  id: OrderDirection
  question: OrderDirection
  answer: OrderDirection
  order: OrderDirection
}

input FAQUpdateInput {
  question: String
  answer: String
  order: Int
  contactPage: ContactPageRelateToOneForUpdateInput
}

input ContactPageRelateToOneForUpdateInput {
  create: ContactPageCreateInput
  connect: ContactPageWhereUniqueInput
  disconnect: Boolean
}

input FAQUpdateArgs {
  where: FAQWhereUniqueInput!
  data: FAQUpdateInput!
}

input FAQCreateInput {
  question: String
  answer: String
  order: Int
  contactPage: ContactPageRelateToOneForCreateInput
}

input ContactPageRelateToOneForCreateInput {
  create: ContactPageCreateInput
  connect: ContactPageWhereUniqueInput
}

type SiteSetting {
  id: ID!
  siteName: String
  logo: FileFieldOutput
  phoneNumber: String
  phoneNumberRaw: String
  companyDescription: String
  addressLine1: String
  addressLine2: String
  city: String
  postalCode: String
  country: String
  googleMapsUrl: String
  email: String
  website: String
  websiteUrl: String
  facebookUrl: String
  twitterUrl: String
  linkedinUrl: String
  copyrightText: String
  designerCredit: String
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

input SiteSettingWhereUniqueInput {
  id: ID
  siteName: String
}

input SiteSettingWhereInput {
  AND: [SiteSettingWhereInput!]
  OR: [SiteSettingWhereInput!]
  NOT: [SiteSettingWhereInput!]
  id: IDFilter
  siteName: StringFilter
  phoneNumber: StringFilter
  phoneNumberRaw: StringFilter
  companyDescription: StringFilter
  addressLine1: StringFilter
  addressLine2: StringFilter
  city: StringFilter
  postalCode: StringFilter
  country: StringFilter
  googleMapsUrl: StringFilter
  email: StringFilter
  website: StringFilter
  websiteUrl: StringFilter
  facebookUrl: StringFilter
  twitterUrl: StringFilter
  linkedinUrl: StringFilter
  copyrightText: StringFilter
  designerCredit: StringFilter
}

input SiteSettingOrderByInput {
  id: OrderDirection
  siteName: OrderDirection
  phoneNumber: OrderDirection
  phoneNumberRaw: OrderDirection
  companyDescription: OrderDirection
  addressLine1: OrderDirection
  addressLine2: OrderDirection
  city: OrderDirection
  postalCode: OrderDirection
  country: OrderDirection
  googleMapsUrl: OrderDirection
  email: OrderDirection
  website: OrderDirection
  websiteUrl: OrderDirection
  facebookUrl: OrderDirection
  twitterUrl: OrderDirection
  linkedinUrl: OrderDirection
  copyrightText: OrderDirection
  designerCredit: OrderDirection
}

input SiteSettingUpdateInput {
  siteName: String
  logo: FileFieldInput
  phoneNumber: String
  phoneNumberRaw: String
  companyDescription: String
  addressLine1: String
  addressLine2: String
  city: String
  postalCode: String
  country: String
  googleMapsUrl: String
  email: String
  website: String
  websiteUrl: String
  facebookUrl: String
  twitterUrl: String
  linkedinUrl: String
  copyrightText: String
  designerCredit: String
}

input FileFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input SiteSettingUpdateArgs {
  where: SiteSettingWhereUniqueInput!
  data: SiteSettingUpdateInput!
}

input SiteSettingCreateInput {
  siteName: String
  logo: FileFieldInput
  phoneNumber: String
  phoneNumberRaw: String
  companyDescription: String
  addressLine1: String
  addressLine2: String
  city: String
  postalCode: String
  country: String
  googleMapsUrl: String
  email: String
  website: String
  websiteUrl: String
  facebookUrl: String
  twitterUrl: String
  linkedinUrl: String
  copyrightText: String
  designerCredit: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createAdmin(data: AdminCreateInput!): Admin
  createAdmins(data: [AdminCreateInput!]!): [Admin]
  updateAdmin(where: AdminWhereUniqueInput!, data: AdminUpdateInput!): Admin
  updateAdmins(data: [AdminUpdateArgs!]!): [Admin]
  deleteAdmin(where: AdminWhereUniqueInput!): Admin
  deleteAdmins(where: [AdminWhereUniqueInput!]!): [Admin]
  createContactPage(data: ContactPageCreateInput!): ContactPage
  createContactPages(data: [ContactPageCreateInput!]!): [ContactPage]
  updateContactPage(where: ContactPageWhereUniqueInput!, data: ContactPageUpdateInput!): ContactPage
  updateContactPages(data: [ContactPageUpdateArgs!]!): [ContactPage]
  deleteContactPage(where: ContactPageWhereUniqueInput!): ContactPage
  deleteContactPages(where: [ContactPageWhereUniqueInput!]!): [ContactPage]
  createFAQ(data: FAQCreateInput!): FAQ
  createFAQS(data: [FAQCreateInput!]!): [FAQ]
  updateFAQ(where: FAQWhereUniqueInput!, data: FAQUpdateInput!): FAQ
  updateFAQS(data: [FAQUpdateArgs!]!): [FAQ]
  deleteFAQ(where: FAQWhereUniqueInput!): FAQ
  deleteFAQS(where: [FAQWhereUniqueInput!]!): [FAQ]
  createSiteSetting(data: SiteSettingCreateInput!): SiteSetting
  createSiteSettings(data: [SiteSettingCreateInput!]!): [SiteSetting]
  updateSiteSetting(where: SiteSettingWhereUniqueInput!, data: SiteSettingUpdateInput!): SiteSetting
  updateSiteSettings(data: [SiteSettingUpdateArgs!]!): [SiteSetting]
  deleteSiteSetting(where: SiteSettingWhereUniqueInput!): SiteSetting
  deleteSiteSettings(where: [SiteSettingWhereUniqueInput!]!): [SiteSetting]
  endSession: Boolean!
  authenticateAdminWithPassword(email: String!, password: String!): AdminAuthenticationWithPasswordResult
  createInitialAdmin(data: CreateInitialAdminInput!): AdminAuthenticationWithPasswordSuccess!
}

union AdminAuthenticationWithPasswordResult = AdminAuthenticationWithPasswordSuccess | AdminAuthenticationWithPasswordFailure

type AdminAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: Admin!
}

type AdminAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialAdminInput {
  name: String
  email: String
  password: String
}

type Query {
  admin(where: AdminWhereUniqueInput!): Admin
  admins(where: AdminWhereInput! = {}, orderBy: [AdminOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AdminWhereUniqueInput): [Admin!]
  adminsCount(where: AdminWhereInput! = {}): Int
  contactPage(where: ContactPageWhereUniqueInput!): ContactPage
  contactPages(where: ContactPageWhereInput! = {}, orderBy: [ContactPageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContactPageWhereUniqueInput): [ContactPage!]
  contactPagesCount(where: ContactPageWhereInput! = {}): Int
  fAQ(where: FAQWhereUniqueInput!): FAQ
  fAQS(where: FAQWhereInput! = {}, orderBy: [FAQOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FAQWhereUniqueInput): [FAQ!]
  fAQSCount(where: FAQWhereInput! = {}): Int
  siteSetting(where: SiteSettingWhereUniqueInput!): SiteSetting
  siteSettings(where: SiteSettingWhereInput! = {}, orderBy: [SiteSettingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SiteSettingWhereUniqueInput): [SiteSetting!]
  siteSettingsCount(where: SiteSettingWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = Admin

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialColumns: [String!]!
  initialSearchFields: [String!]!
  initialSort: KeystoneAdminUISort
  isSingleton: Boolean!
  hideCreate: Boolean!
  hideDelete: Boolean!
  isHidden: Boolean!
  itemQueryName: String!
  listQueryName: String!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
